import asyncio
import logging
import httpx
import os
import json
from typing import Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta

from ..db.models import User, APIKey, UserSession
from ..core.config import settings
from ..crud import session as session_crud, private_key as private_key_crud
from .proxy_router import execute_proxy_router_operation

logger = logging.getLogger(__name__)

async def create_automated_session(
    db: AsyncSession, 
    user: User, 
    api_key: APIKey, 
    target_model: str,
    session_duration: int = 3600
) -> Optional[UserSession]:
    """
    Create an automated session for a user with the specified model.
    
    Args:
        db: Database session
        user: User object
        api_key: API key object
        target_model: Target model blockchain ID
        session_duration: Session duration in seconds
        
    Returns:
        The created UserSession object
        
    Raises:
        Exception: If session creation fails
    """
    # Log attempt to create automated session
    logger.info(f"Attempting to create automated session for user {user.id} with model {target_model}")
    
    # Implement retry logic for session creation
    max_retries = 2
    retry_count = 0
    last_error = None
    
    while retry_count <= max_retries:
        try:
            # Create a new session using the proxy router
            endpoint = f"blockchain/models/{target_model}/session"
            data = {
                "sessionDuration": session_duration,
                "directPayment": False,
                "failover": True
            }
            
            # Create a new session using the existing session API endpoint
            # This should internally handle the communication with the proxy router
            endpoint = "api/v1/session/modelsession"
            data = {
                "model_id": target_model,
                "session_duration": session_duration
            }
            
            # Use the local API endpoint that's designed for model sessions
            # This avoids direct blockchain communication
            endpoint = "api/v1/session/modelsession"
            data = {
                "model_id": target_model,
                "session_duration": session_duration
            }

            # Call proxy router
            result = await execute_proxy_router_operation(
                endpoint=endpoint,
                user_id=user.id,
                db=db,
                method="POST", 
                data=data
            )
            
            if not result or "session_id" not in result:
                error_msg = f"Failed to create session, unexpected response: {result}"
                logger.error(error_msg)
                last_error = Exception(error_msg)
                retry_count += 1
                if retry_count <= max_retries:
                    await asyncio.sleep(0.5)  # Wait before retrying
                continue
            
            # Check for error in response
            if "error" in result:
                error_msg = f"Error creating session: {result['error']}"
                logger.error(error_msg)
                last_error = Exception(error_msg)
                retry_count += 1
                if retry_count <= max_retries:
                    await asyncio.sleep(0.5)  # Wait before retrying
                continue
            
            # Get session ID from response
            session_id = result.get("session_id")
            if not session_id:
                error_msg = "Session ID not found in response"
                logger.error(error_msg)
                last_error = Exception(error_msg)
                retry_count += 1
                if retry_count <= max_retries:
                    await asyncio.sleep(0.5)  # Wait before retrying
                continue
            
            # Create session record in database
            expires_at = datetime.utcnow() + timedelta(seconds=session_duration)
            
            # Save session to database
            new_session = await session_crud.create_session(
                db=db,
                api_key_id=api_key.id,
                session_id=session_id,
                model_id=target_model,
                expires_at=expires_at
            )
            
            # Log successful session creation
            logger.info(f"Successfully created automated session {session_id} for user {user.id}")
            
            return new_session
            
        except Exception as e:
            retry_count += 1
            logger.error(f"Attempt {retry_count} failed to create automated session: {str(e)}")
            last_error = e
            
            if retry_count <= max_retries:
                # Wait briefly before retrying
                await asyncio.sleep(0.5)
                logger.info(f"Retrying session creation (attempt {retry_count+1})")
            else:
                # All retries failed
                logger.error(f"All attempts to create automated session failed: {str(e)}")
                raise e

    # If we get here, all retries failed
    if last_error:
        raise last_error
    
    # Fallback error (should never happen)
    raise Exception("Failed to create automated session for unknown reason") 